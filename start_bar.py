import os
from dotenv import load_dotenv
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from kbs import b1, b2

load_dotenv()

bot_token = os.getenv("BOT_TOKEN")
bot = Bot(token=bot_token)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    welcome_text = """
    üåü **–©–∏—Ä—ñ –≤—ñ—Ç–∞–Ω–Ω—è!**üåü
    –¶–µ –±–æ—Ç-–ø—Ä–æ—Å—Ç—ñ—Ä LOVESPACE. –°—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –ø—ñ–∑–Ω–∞–Ω–Ω—è —Å–µ–±–µ,
    —Å–≤–æ—ó—Ö –ø–æ—á—É—Ç—Ç—ñ–≤ —Ç–∞ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤.
    üöÄ–ù–∞—à–∞ –º—ñ—Å—ñ—è - —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å–µ–∫—Å-–∫—É–ª—å—Ç—É—Ä–∏ —Ç–∞ —Ü—ñ–Ω–Ω–æ—Å—Ç–µ–π –≤ –£–∫—Ä–∞—ó–Ω—ñ. üöÄ
    """
    await message.answer(welcome_text, reply_markup=b1)


@dp.message_handler(lambda c: c.data == 'b1')
async def b1_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await introduction_message(callback_query.message)


async def introduction_message(message: types.Message):
    welcome_text2 = """
        –î–æ —Ç–æ–≥–æ —è–∫ –º–∏ –ø–æ—á–Ω–µ–º–æ, –º–µ–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Ç—Ä–æ—Ö–∏
        –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, —â–æ–± –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Å–∞–º–µ –¥–ª—è
        —Ç–µ–±–µ. –ù–µ —Ö–≤–∏–ª—é–π—Å—è, —Ü–µ –Ω–µ –∑–∞–π–º–µ –±–∞–≥–∞—Ç–æ —á–∞—Å—É.
        –Ø –ø–æ—á–µ–∫–∞—é‚è≥
        """

    await message.answer(welcome_text2, reply_markup=b2)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
