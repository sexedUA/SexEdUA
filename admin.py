from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from keyboards import keyboards as kb
from database import database as db
from dotenv import load_dotenv
import os


storage = MemoryStorage()
load_dotenv()
bot = Bot(os.getenv("ADMIN_TOKEN"))
dp = Dispatcher(bot=bot, storage=storage)


async def set_default_commands(dp):
    commands = [
        types.BotCommand("start", "–ü–æ—á–∞—Ç–∏"),
        types.BotCommand("menu", "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
        types.BotCommand("cancel", "–í–∏–π—Ç–∏")
    ]
    await bot.set_my_commands(commands)
    print("–ë–æ—Ç –∑–∞–ø—Ä–∞—Ü—é–≤–∞–≤!")


async def on_shutdown(dp):
    await db.db_close()


class NewOrder(StatesGroup):
    desc = State()
    photo = State()


class NewReview(StatesGroup):
    desc = State()
    photo = State()
    link = State()


@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    if message.from_user.id == int(os.getenv("ADMIN_ID1")) or message.from_user.id == int(os.getenv("ADMIN_ID2")):
        await message.answer("–ü—Ä–∏–≤—ñ—Ç, –ê–¥–º—ñ–Ω. –ù–∞–¥ —á–∏–º –ø–æ–ø—Ä–∞—Ü—é—î–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ?", reply_markup=kb.main_menu_admin)


@dp.message_handler(text="–ù–∞–∑–∞–¥", state="*")
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if (current_state == "NewOrder.desc") or (current_state == "NewOrder.photo"):
        await state.finish()
        await message.answer("–í–∏ –≤–∏–π—à–ª–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É. –©–æ –± –≤–∏ —Ö–æ—Ç—ñ–ª–∏ —Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?", reply_markup=kb.main_menu_admin)
    await state.finish()
    await message.answer("–í–∏ –≤–∏–π—à–ª–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É. –©–æ –± –≤–∏ —Ö–æ—Ç—ñ–ª–∏ —Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?", reply_markup=kb.main_menu_admin)


@dp.message_handler(commands=["menu"])
async def menu_handler(message: types.Message):
    await message.answer("–í–∏–±–µ—Ä–∏ –Ω–∞–¥ —á–∏–º –±—É–¥–µ—à –ø—Ä–∞—Ü—é–≤–∞—Ç–∏", reply_markup=kb.main_menu_admin)


@dp.message_handler(text='–°–µ–∫—Å-—ñ—Å—Ç–æ—Ä—ñ—è')
async def get_stories(message: types.Message):
    stories = db.get_stories_admin()
    if stories:
        pass
    else:
        await message.answer("–ù–æ–≤–∏—Ö —ñ—Å—Ç–æ—Ä—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòî")


@dp.message_handler(text="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏")
async def contacts(message: types.Message):
    if message.from_user.id == int(os.getenv("ADMIN_ID")):
        await message.answer("–í–∏ –∑–∞–π—à–ª–∏ —è–∫ –∞–¥–º—ñ–Ω", reply_markup=kb.adminpanel)
    else:
        await message.reply("–ù–µ —Ä–æ–∑—É–º—ñ—é.")


@dp.callback_query_handler()
async def callback_query_keyboard(callback_query: types.CallbackQuery):
    if callback_query.data == "add":
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text="–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É"
        )
    elif callback_query.data == "delete":
        await bot.send_message(
            chat_id=callback_query.from_user.id, text="–í—ã –≤–∏–¥–∞–ª—è—î—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç"
        )
    elif callback_query.data == "mail":
        await bot.send_message(
            chat_id=callback_query.from_user.id, text="–í—ã —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É"
        )


@dp.message_handler(text="–ü–æ–∑–∞ –¥–Ω—è")
async def add_item(message: types.Message):
    await message.answer("–ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –æ–ø–∏—Å –ø–æ–∑–∏", reply_markup=kb.cancel)
    await NewOrder.desc.set()


@dp.message_handler(state=NewOrder.desc)
async def add_item_desc(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["desc"] = message.text
    await message.answer("–î–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ —á–∏ GIF")
    await state.set_state(NewOrder.photo)


@dp.message_handler(lambda message: not message.photo, state=NewOrder.photo)
async def add_item_content_check(message: types.Message):
    await message.answer('–¶–µ –Ω–µ —Ñ–æ—Ç–æ —ñ –Ω–µ –≥—ñ—Ñ!')


@dp.message_handler(content_types=[types.ContentType.ANIMATION], state=NewOrder.photo)
async def add_item_animation(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        file_path = await bot.get_file(message.animation.file_id)
        animation_file = await bot.download_file(file_path.file_path)
        animation_bytes = animation_file.read()
        data['photo'] = animation_bytes
    await db.add_item(state)
    await message.answer("–ü–æ–∑–∞ –¥–æ–¥–∞–Ω–∞!", reply_markup=kb.main_menu_admin)
    await state.finish()


@dp.message_handler(content_types=[types.ContentType.PHOTO], state=NewOrder.photo)
async def add_item_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    await db.add_item(state)
    await message.answer("–ü–æ–∑–∞ –¥–æ–¥–∞–Ω–∞!", reply_markup=kb.main_menu_admin)
    await state.finish()


@dp.message_handler(text="–î–æ–¥–∞—Ç–∏ —Ä–µ–≤—å—é –Ω–∞ —Ç–æ–≤–∞—Ä")
async def add_review_text(message: types.Message):
    await message.answer("–ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ —Ç–µ–∫—Å—Ç —Ä–µ–≤—å—é", reply_markup=kb.cancel)
    await NewReview.desc.set()


@dp.message_handler(state=NewReview.desc)
async def add_review_desc(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["desc"] = message.text
    await message.answer("–î–æ–¥–∞–π—Ç–µ –ª—ñ–Ω–∫ –Ω–∞ —Ç–æ–≤–∞—Ä –∑ –º–∞–≥–∞–∑–∏–Ω—É")
    await NewReview.link.set()


@dp.message_handler(state=NewReview.link)
async def add_review_link(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["link"] = message.text
    await message.answer("–î–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É")
    await NewReview.photo.set()


@dp.message_handler(lambda message: not message.photo, state=NewReview.photo)
async def add_review_content_check(message: types.Message):
    await message.answer('–¶–µ –Ω–µ —Ñ–æ—Ç–æ :(')


@dp.message_handler(content_types=[types.ContentType.PHOTO], state=NewReview.photo)
async def add_review_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        # –í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—à–∏–π –æ–±'—î–∫—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –∑—ñ —Å–ø–∏—Å–∫—É
        photo_obj = message.photo[-1]
        file_path = await bot.get_file(photo_obj.file_id)
        photo_file = await bot.download_file(file_path.file_path)
        photo_bytes = photo_file.read()
        data['photo'] = photo_bytes
    await db.add_review(state)
    await message.answer("–û–≥–ª—è–¥ —Ç–æ–≤–∞—Ä—É –¥–æ–¥–∞–Ω–∏–π!", reply_markup=kb.main_menu_admin)
    await state.finish()

if __name__ == "__main__":
    executor.start_polling(
        dp, on_startup=set_default_commands, skip_updates=True, on_shutdown=on_shutdown)
