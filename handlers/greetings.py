from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from keyboards import keyboards as kb
from database import database as db
from dotenv import load_dotenv
import random
import os
import time
from handlers.menu import quiz_handler
from handlers.quiz import quiz_choose_handler
from handlers.story import story_handler, read_story, add_story, Story

storage = MemoryStorage()
bot = Bot(os.getenv("TOKEN"))
dp = Dispatcher(bot=bot,storage=storage)

class Greetings(StatesGroup):
    age = State()
    gender = State()
    orientation = State()


async def start_on(message: types.Message):
    user_id = message.from_user.id
    user = db.get_user(user_id) 
    if not user:
        await message.answer("–ü—Ä–∏–≤—ñ—Ç!")
        await message.answer_sticker('CAACAgIAAxkBAAIMvGTTY5ISyIjn-N6yi2VILV1sBmPbAAITDAAC4stASAoWS8U3wbIyMAQ')
        time.sleep(1)
        await message.answer("–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–π–æ–º–∏–º–æ—Å—å?üòâ", reply_markup=kb.greetings)
    else:
        await message.answer("–ü—Ä–∏–≤—ñ—Ç–∏–∫–∏ ü•∞ –©–æ –æ–±–µ—Ä–µ—à —Å—å–æ–≥–æ–¥–Ω—ñ?", reply_markup=kb.main_menu)



async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if (current_state == "Greetings.age") or (current_state == "Greetings.gender") or (current_state == "Greetings.orientation"):
        await state.finish() 
        await message.answer("–í–∏ –≤–∏–π—à–ª–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É. –©–æ –± –≤–∏ —Ö–æ—Ç—ñ–ª–∏ —Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?")
    await state.finish()
    await message.answer("–í–∏ –≤–∏–π—à–ª–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É. –©–æ –± –≤–∏ —Ö–æ—Ç—ñ–ª–∏ —Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?")


async def greetings(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "yes":
        # await bot.send_sticker(CAACAgEAAxkBAAIMwmTTZWvfNF2Xp4km4bVALTxERw-9AALRAQACOA6CEYhFy3sr91pVMAQ)
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text="–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")
        await Greetings.age.set()
    elif callback_query.data == "no":
        # await bot.send_sticker('CAACAgIAAxkBAAIMv2TTY7uFZwFDOkfkU0FVyBRaHcs5AAJ5DAACoa5ASNb10Q3I2CyMMAQ')
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text="–¢–æ–¥—ñ –ø–æ–∑–Ω–∞–π–æ–º–∏–º—Å—è –ø—ñ–∑–Ω—ñ—à–µüòâ. –î–∏–≤–∏—Å—å —â–æ —É –Ω–∞—Å —î –≤ –º–µ–Ω—é ‚¨áÔ∏è ", reply_markup=kb.main_menu)
        

async def invalid_age(message: types.Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ –≤—ñ–∫—É.")
    

async def get_age(message: types.Message, state: FSMContext):
    age = int(message.text)
    if age < 18:
        await state.finish()
        await message.answer("üîû –ù–∞ –∂–∞–ª—å, –Ω–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç –º–∞—î –æ–±–º–µ–∂–µ–Ω–Ω—è 18+.", reply_markup=kb.main_menu)
        return 
    await state.update_data(age=age)
    await bot.send_message(chat_id=message.from_user.id,
                           text="–£–∫–∞–∂–∏ —Å–≤—ñ–π –≥–µ–Ω–¥–µ—Ä:",
                           reply_markup=kb.gender_keyboard
                           )
    await Greetings.next()



async def get_gender(query: types.CallbackQuery, state: FSMContext):
    gender = query.data
    await state.update_data(gender=gender)
    await bot.send_message(chat_id=query.from_user.id,
                           text="–£–∫–∞–∂–∏ —Å–≤–æ—é –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—é:",
                           reply_markup=kb.orientation_keyboard
                           )
    await Greetings.next()


async def get_orientation(query: types.CallbackQuery, state: FSMContext):
    orientation = query.data
    async with state.proxy() as data:
        age = data["age"]
        gender = data["gender"]
        data["orientation"] = orientation
    await db.cmd_start_db(query.from_user.id, age, gender, orientation) 
    await bot.send_message(chat_id=query.from_user.id,
                           text="–î—è–∫—É—î–º–æüòä –ü—Ä–∏—î–º–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É. –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –æ–±—Ä–∞—Ç—É —É–ª—é–±–ª–µ–Ω—É –ø–æ–∑—É —É —Ä—É–±—Ä–∏—Ü—ñ **–ü–æ–∑–∞ –¥–Ω—è**",reply_markup=kb.main_menu
                           )
    await state.finish()

